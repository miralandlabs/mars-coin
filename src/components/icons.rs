use dioxus::prelude::*;

#[component]
pub fn MarsIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 350 350",
            fill: "currentColor",
            class: "{class}",
            path {
                fill: "#FFFEFE",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M203.000000,351.000000 
                C135.333344,351.000000 68.166687,351.000000 1.000027,351.000000 
                C1.000018,234.333359 1.000018,117.666733 1.000009,1.000074 
                C117.666618,1.000049 234.333237,1.000049 350.999878,1.000025 
                C350.999939,117.666595 350.999939,234.333191 350.999969,350.999878 
                C301.833344,351.000000 252.666672,351.000000 203.000000,351.000000 
                M123.097603,54.672638 
                C100.436981,54.672638 77.776360,54.672638 54.610638,54.672638 
                C54.610638,56.680676 54.610638,58.300903 54.171379,60.740269 
                C47.710167,139.319870 41.248955,217.899475 34.767124,296.729797 
                C54.075203,296.729797 73.017204,296.729797 92.471497,296.729797 
                C95.778175,252.226837 99.084343,207.730667 102.390518,163.234512 
                C102.736862,163.185318 103.083206,163.136124 103.429558,163.086929 
                C120.071648,207.604935 136.713745,252.122940 153.469330,296.944519 
                C166.028076,296.944519 178.509445,296.767334 190.981750,297.026550 
                C196.420761,297.139618 199.838333,297.005249 201.886459,290.120331 
                C206.175613,275.701965 212.404922,261.869659 217.608368,247.712463 
                C227.830658,219.900253 237.892960,192.029266 248.058029,164.195923 
                C248.222717,163.745010 248.851913,163.463745 249.590668,162.818085 
                C252.921310,207.826218 256.209320,252.258209 259.501587,296.747803 
                C278.943756,296.747803 297.880493,296.747803 317.022522,296.747803 
                C317.022522,295.412048 317.103088,294.277161 317.010895,293.156464 
                C313.667084,252.516647 310.305725,211.878265 306.949921,171.239410 
                C304.594147,142.710724 302.273132,114.179100 299.870789,85.654335 
                C299.147217,77.063240 298.202942,68.490730 297.470001,58.985359 
                C297.295532,57.579109 297.121063,56.172859 296.928070,54.617462 
                C275.034210,54.617462 253.598175,54.580246 232.163223,54.714897 
                C230.946762,54.722538 229.739136,56.139050 228.050949,57.403034 
                C211.272324,102.274857 194.493713,147.146667 177.241592,193.284821 
                C159.422134,146.797546 142.212067,101.900078 124.994461,56.399799 
                C124.644974,55.962685 124.295494,55.525570 123.097603,54.672638 
                z"
            }
            path {
                fill: "#E51A38",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M125.002014,57.002613 
                C142.212067,101.900078 159.422134,146.797546 177.241592,193.284821 
                C194.493713,147.146667 211.272324,102.274857 228.640518,57.157909 
                C229.463211,56.935528 229.696335,56.958271 230.404938,56.988228 
                C250.602768,56.996822 270.325287,57.037724 290.047241,56.952808 
                C292.707611,56.941353 294.902649,57.212292 296.322388,59.975418 
                C296.898712,59.939373 297.129242,59.924541 297.359772,59.909710 
                C298.202942,68.490730 299.147217,77.063240 299.870789,85.654335 
                C302.273132,114.179100 304.594147,142.710724 306.949921,171.239410 
                C310.305725,211.878265 313.667084,252.516647 317.010895,293.156464 
                C317.103088,294.277161 317.022522,295.412048 317.022522,296.747803 
                C297.880493,296.747803 278.943756,296.747803 259.501587,296.747803 
                C256.209320,252.258209 252.921310,207.826218 249.590668,162.818085 
                C248.851913,163.463745 248.222717,163.745010 248.058029,164.195923 
                C237.892960,192.029266 227.830658,219.900253 217.608368,247.712463 
                C212.404922,261.869659 206.175613,275.701965 201.886459,290.120331 
                C199.838333,297.005249 196.420761,297.139618 190.981750,297.026550 
                C178.509445,296.767334 166.028076,296.944519 153.469330,296.944519 
                C136.713745,252.122940 120.071648,207.604935 103.429558,163.086929 
                C103.083206,163.136124 102.736862,163.185318 102.390518,163.234512 
                C99.084343,207.730667 95.778175,252.226837 92.471497,296.729797 
                C73.017204,296.729797 54.075203,296.729797 34.767124,296.729797 
                C41.248955,217.899475 47.710167,139.319870 54.627281,60.322689 
                C55.391220,59.984287 55.703964,60.014290 56.304024,59.742561 
                C58.304699,58.659687 60.017250,57.120373 61.741714,57.106903 
                C82.827469,56.942249 103.914970,57.001427 125.002014,57.002613 
                z"
            }
            path {
                fill: "#E40000",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M56.021427,59.995117 
                C55.703964,60.014290 55.391220,59.984287 54.846912,59.913120 
                C54.610638,58.300903 54.610638,56.680676 54.610638,54.672638 
                C77.776360,54.672638 100.436981,54.672638 123.229599,55.172943 
                C121.555450,55.783222 119.749420,55.986618 117.943153,55.988815 
                C98.737259,56.012108 79.531113,56.049774 60.325665,55.955437 
                C57.322399,55.940685 55.415512,56.464279 56.021427,59.995117 
                z"
            }
            path {
                fill: "#E5263E",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M56.304024,59.742561 
                C55.415512,56.464279 57.322399,55.940685 60.325665,55.955437 
                C79.531113,56.049774 98.737259,56.012108 117.943153,55.988815 
                C119.749420,55.986618 121.555450,55.783222 123.653793,55.380852 
                C124.295494,55.525570 124.644974,55.962685 124.998238,56.701206 
                C103.914970,57.001427 82.827469,56.942249 61.741714,57.106903 
                C60.017250,57.120373 58.304699,58.659687 56.304024,59.742561 
                z"
            }
            path {
                fill: "#E40001",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M297.414886,59.447533 
                C297.129242,59.924541 296.898712,59.939373 296.328064,59.550606 
                C296.332794,55.268299 293.510529,56.017372 291.311737,56.014782 
                C272.403687,55.992504 253.495560,55.979050 234.587738,56.044312 
                C233.033920,56.049671 231.482162,56.654644 229.929459,56.981010 
                C229.696335,56.958271 229.463211,56.935528 228.878754,56.906311 
                C229.739136,56.139050 230.946762,54.722538 232.163223,54.714897 
                C253.598175,54.580246 275.034210,54.617462 296.928070,54.617462 
                C297.121063,56.172859 297.295532,57.579109 297.414886,59.447533 
                z"
            }
            path {
                fill: "#E5253D",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M230.404938,56.988228 
                C231.482162,56.654644 233.033920,56.049671 234.587738,56.044312 
                C253.495560,55.979050 272.403687,55.992504 291.311737,56.014782 
                C293.510529,56.017372 296.332794,55.268299 295.982239,59.571827 
                C294.902649,57.212292 292.707611,56.941353 290.047241,56.952808 
                C270.325287,57.037724 250.602768,56.996822 230.404938,56.988228 
                z"
            }
        }
    }
}

#[component]
pub fn QrCodeIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            fill: "none",
            view_box: "0 0 24 24",
            stroke_width: "2",
            stroke: "currentColor",
            class: "{class}",
            path {
                stroke_linecap: "round",
                stroke_linejoin: "round",
                d: "M3.75 4.875c0-.621.504-1.125 1.125-1.125h4.5c.621 0 1.125.504 1.125 1.125v4.5c0 .621-.504 1.125-1.125 1.125h-4.5A1.125 1.125 0 0 1 3.75 9.375v-4.5ZM3.75 14.625c0-.621.504-1.125 1.125-1.125h4.5c.621 0 1.125.504 1.125 1.125v4.5c0 .621-.504 1.125-1.125 1.125h-4.5a1.125 1.125 0 0 1-1.125-1.125v-4.5ZM13.5 4.875c0-.621.504-1.125 1.125-1.125h4.5c.621 0 1.125.504 1.125 1.125v4.5c0 .621-.504 1.125-1.125 1.125h-4.5A1.125 1.125 0 0 1 13.5 9.375v-4.5Z"
            }
            path {
                stroke_linecap: "round",
                stroke_linejoin: "round",
                d: "M6.75 6.75h.75v.75h-.75v-.75ZM6.75 16.5h.75v.75h-.75v-.75ZM16.5 6.75h.75v.75h-.75v-.75ZM13.5 13.5h.75v.75h-.75v-.75ZM13.5 19.5h.75v.75h-.75v-.75ZM19.5 13.5h.75v.75h-.75v-.75ZM19.5 19.5h.75v.75h-.75v-.75ZM16.5 16.5h.75v.75h-.75v-.75Z"
            }
        }
    }
}

#[component]
pub fn SearchIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            fill: "currentColor",
            view_box: "0 0 24 24",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M10.5 3.75a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5ZM2.25 10.5a8.25 8.25 0 1 1 14.59 5.28l4.69 4.69a.75.75 0 1 1-1.06 1.06l-4.69-4.69A8.25 8.25 0 0 1 2.25 10.5Z",
                clip_rule: "evenodd"
            }
        }
    }
}

#[component]
pub fn CubeIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                d: "M12.378 1.602a.75.75 0 0 0-.756 0L3 6.632l9 5.25 9-5.25-8.622-5.03ZM21.75 7.93l-9 5.25v9l8.628-5.032a.75.75 0 0 0 .372-.648V7.93ZM11.25 22.18v-9l-9-5.25v8.57a.75.75 0 0 0 .372.648l8.628 5.033Z"
            }
        }
    }
}

#[component]
pub fn CubeTransparentIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M11.622 1.602a.75.75 0 0 1 .756 0l2.25 1.313a.75.75 0 0 1-.756 1.295L12 3.118 10.128 4.21a.75.75 0 1 1-.756-1.295l2.25-1.313ZM5.898 5.81a.75.75 0 0 1-.27 1.025l-1.14.665 1.14.665a.75.75 0 1 1-.756 1.295L3.75 8.806v.944a.75.75 0 0 1-1.5 0V7.5a.75.75 0 0 1 .372-.648l2.25-1.312a.75.75 0 0 1 1.026.27Zm12.204 0a.75.75 0 0 1 1.026-.27l2.25 1.312a.75.75 0 0 1 .372.648v2.25a.75.75 0 0 1-1.5 0v-.944l-1.122.654a.75.75 0 1 1-.756-1.295l1.14-.665-1.14-.665a.75.75 0 0 1-.27-1.025Zm-9 5.25a.75.75 0 0 1 1.026-.27L12 11.882l1.872-1.092a.75.75 0 1 1 .756 1.295l-1.878 1.096V15a.75.75 0 0 1-1.5 0v-1.82l-1.878-1.095a.75.75 0 0 1-.27-1.025ZM3 13.5a.75.75 0 0 1 .75.75v1.82l1.878 1.095a.75.75 0 1 1-.756 1.295l-2.25-1.312a.75.75 0 0 1-.372-.648v-2.25A.75.75 0 0 1 3 13.5Zm18 0a.75.75 0 0 1 .75.75v2.25a.75.75 0 0 1-.372.648l-2.25 1.312a.75.75 0 1 1-.756-1.295l1.878-1.096V14.25a.75.75 0 0 1 .75-.75Zm-9 5.25a.75.75 0 0 1 .75.75v.944l1.122-.654a.75.75 0 1 1 .756 1.295l-2.25 1.313a.75.75 0 0 1-.756 0l-2.25-1.313a.75.75 0 1 1 .756-1.295l1.122.654V19.5a.75.75 0 0 1 .75-.75Z",
                clip_rule: "evenodd"
            }
        }
    }
}

#[component]
pub fn AdjustmentsHorizontalIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            stroke_width: 0,
            path {
                d: "M18.75 12.75h1.5a.75.75 0 0 0 0-1.5h-1.5a.75.75 0 0 0 0 1.5ZM12 6a.75.75 0 0 1 .75-.75h7.5a.75.75 0 0 1 0 1.5h-7.5A.75.75 0 0 1 12 6ZM12 18a.75.75 0 0 1 .75-.75h7.5a.75.75 0 0 1 0 1.5h-7.5A.75.75 0 0 1 12 18ZM3.75 6.75h1.5a.75.75 0 1 0 0-1.5h-1.5a.75.75 0 0 0 0 1.5ZM5.25 18.75h-1.5a.75.75 0 0 1 0-1.5h1.5a.75.75 0 0 1 0 1.5ZM3 12a.75.75 0 0 1 .75-.75h7.5a.75.75 0 0 1 0 1.5h-7.5A.75.75 0 0 1 3 12ZM9 3.75a2.25 2.25 0 1 0 0 4.5 2.25 2.25 0 0 0 0-4.5ZM12.75 12a2.25 2.25 0 1 1 4.5 0 2.25 2.25 0 0 1-4.5 0ZM9 15.75a2.25 2.25 0 1 0 0 4.5 2.25 2.25 0 0 0 0-4.5Z"
            }
        }
    }
}

#[component]
pub fn PauseIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M6.75 5.25a.75.75 0 0 1 .75-.75H9a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H7.5a.75.75 0 0 1-.75-.75V5.25Zm7.5 0A.75.75 0 0 1 15 4.5h1.5a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H15a.75.75 0 0 1-.75-.75V5.25Z",
                clip_rule: "evenodd"
            }
        }
    }
}

#[component]
pub fn PlayIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z",
                clip_rule: "evenodd"
            }
        }
    }
}

#[component]
pub fn PlusIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 20 20",
            fill: "currentColor",
            class: "{class}",
            path {
                d: "M10.75 4.75a.75.75 0 0 0-1.5 0v4.5h-4.5a.75.75 0 0 0 0 1.5h4.5v4.5a.75.75 0 0 0 1.5 0v-4.5h4.5a.75.75 0 0 0 0-1.5h-4.5v-4.5Z"
            }
        }
    }
}

#[component]
pub fn InfoIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 16 16",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0ZM9 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM6.75 8a.75.75 0 0 0 0 1.5h.75v1.75a.75.75 0 0 0 1.5 0v-2.5A.75.75 0 0 0 8.25 8h-1.5Z",
            }
        }
    }
}

#[component]
pub fn WarningIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003ZM12 8.25a.75.75 0 0 1 .75.75v3.75a.75.75 0 0 1-1.5 0V9a.75.75 0 0 1 .75-.75Zm0 8.25a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Z"
            }
        }
    }
}

#[component]
pub fn CheckIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z"
            }
        }
    }
}

#[component]
pub fn UserIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M7.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM3.751 20.105a8.25 8.25 0 0 1 16.498 0 .75.75 0 0 1-.437.695A18.683 18.683 0 0 1 12 22.5c-2.786 0-5.433-.608-7.812-1.7a.75.75 0 0 1-.437-.695Z"
            }
        }
    }
}

#[component]
pub fn UserGroupIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M8.25 6.75a3.75 3.75 0 1 1 7.5 0 3.75 3.75 0 0 1-7.5 0ZM15.75 9.75a3 3 0 1 1 6 0 3 3 0 0 1-6 0ZM2.25 9.75a3 3 0 1 1 6 0 3 3 0 0 1-6 0ZM6.31 15.117A6.745 6.745 0 0 1 12 12a6.745 6.745 0 0 1 6.709 7.498.75.75 0 0 1-.372.568A12.696 12.696 0 0 1 12 21.75c-2.305 0-4.47-.612-6.337-1.684a.75.75 0 0 1-.372-.568 6.787 6.787 0 0 1 1.019-4.38Z",
            }
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M5.082 14.254a8.287 8.287 0 0 0-1.308 5.135 9.687 9.687 0 0 1-1.764-.44l-.115-.04a.563.563 0 0 1-.373-.487l-.01-.121a3.75 3.75 0 0 1 3.57-4.047ZM20.226 19.389a8.287 8.287 0 0 0-1.308-5.135 3.75 3.75 0 0 1 3.57 4.047l-.01.121a.563.563 0 0 1-.373.486l-.115.04c-.567.2-1.156.349-1.764.441Z"
            }
        }
    }
}

#[component]
pub fn GlobeIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M21.721 12.752a9.711 9.711 0 0 0-.945-5.003 12.754 12.754 0 0 1-4.339 2.708 18.991 18.991 0 0 1-.214 4.772 17.165 17.165 0 0 0 5.498-2.477ZM14.634 15.55a17.324 17.324 0 0 0 .332-4.647c-.952.227-1.945.347-2.966.347-1.021 0-2.014-.12-2.966-.347a17.515 17.515 0 0 0 .332 4.647 17.385 17.385 0 0 0 5.268 0ZM9.772 17.119a18.963 18.963 0 0 0 4.456 0A17.182 17.182 0 0 1 12 21.724a17.18 17.18 0 0 1-2.228-4.605ZM7.777 15.23a18.87 18.87 0 0 1-.214-4.774 12.753 12.753 0 0 1-4.34-2.708 9.711 9.711 0 0 0-.944 5.004 17.165 17.165 0 0 0 5.498 2.477ZM21.356 14.752a9.765 9.765 0 0 1-7.478 6.817 18.64 18.64 0 0 0 1.988-4.718 18.627 18.627 0 0 0 5.49-2.098ZM2.644 14.752c1.682.971 3.53 1.688 5.49 2.099a18.64 18.64 0 0 0 1.988 4.718 9.765 9.765 0 0 1-7.478-6.816ZM13.878 2.43a9.755 9.755 0 0 1 6.116 3.986 11.267 11.267 0 0 1-3.746 2.504 18.63 18.63 0 0 0-2.37-6.49ZM12 2.276a17.152 17.152 0 0 1 2.805 7.121c-.897.23-1.837.353-2.805.353-.968 0-1.908-.122-2.805-.353A17.151 17.151 0 0 1 12 2.276ZM10.122 2.43a18.629 18.629 0 0 0-2.37 6.49 11.266 11.266 0 0 1-3.746-2.504 9.754 9.754 0 0 1 6.116-3.985Z"
            }
        }
    }
}

#[component]
pub fn CircleStackIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M21 6.375c0 2.692-4.03 4.875-9 4.875S3 9.067 3 6.375 7.03 1.5 12 1.5s9 2.183 9 4.875Z",
            }
            path {
                fill_rule: "evenodd",
                d: "M12 12.75c2.685 0 5.19-.586 7.078-1.609a8.283 8.283 0 0 0 1.897-1.384c.016.121.025.244.025.368C21 12.817 16.97 15 12 15s-9-2.183-9-4.875c0-.124.009-.247.025-.368a8.285 8.285 0 0 0 1.897 1.384C6.809 12.164 9.315 12.75 12 12.75Z",
            }
            path {
                fill_rule: "evenodd",
                d: "M12 16.5c2.685 0 5.19-.586 7.078-1.609a8.282 8.282 0 0 0 1.897-1.384c.016.121.025.244.025.368 0 2.692-4.03 4.875-9 4.875s-9-2.183-9-4.875c0-.124.009-.247.025-.368a8.284 8.284 0 0 0 1.897 1.384C6.809 15.914 9.315 16.5 12 16.5Z"
            }
            path {
                fill_rule: "evenodd",
                d: "M12 20.25c2.685 0 5.19-.586 7.078-1.609a8.282 8.282 0 0 0 1.897-1.384c.016.121.025.244.025.368 0 2.692-4.03 4.875-9 4.875s-9-2.183-9-4.875c0-.124.009-.247.025-.368a8.284 8.284 0 0 0 1.897 1.384C6.809 19.664 9.315 20.25 12 20.25Z"
            }
        }
    }
}

#[component]
pub fn PaperAirplaneIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M3.478 2.404a.75.75 0 0 0-.926.941l2.432 7.905H13.5a.75.75 0 0 1 0 1.5H4.984l-2.432 7.905a.75.75 0 0 0 .926.94 60.519 60.519 0 0 0 18.445-8.986.75.75 0 0 0 0-1.218A60.517 60.517 0 0 0 3.478 2.404Z"
            }
        }
    }
}

#[component]
pub fn CopyIcon(class: Option<String>, solid: bool) -> Element {
    let class = class.unwrap_or("".to_string());
    if solid {
        rsx! {
            svg {
                view_box: "0 0 24 24",
                fill: "currentColor",
                class: "{class}",
                path {
                    fill_rule: "evenodd",
                    d: "M7.5 3.375c0-1.036.84-1.875 1.875-1.875h.375a3.75 3.75 0 0 1 3.75 3.75v1.875C13.5 8.161 14.34 9 15.375 9h1.875A3.75 3.75 0 0 1 21 12.75v3.375C21 17.16 20.16 18 19.125 18h-9.75A1.875 1.875 0 0 1 7.5 16.125V3.375Z",
                }
                path {
                    fill_rule: "evenodd",
                    d: "M15 5.25a5.23 5.23 0 0 0-1.279-3.434 9.768 9.768 0 0 1 6.963 6.963A5.23 5.23 0 0 0 17.25 7.5h-1.875A.375.375 0 0 1 15 7.125V5.25ZM4.875 6H6v10.125A3.375 3.375 0 0 0 9.375 19.5H16.5v1.125c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 0 1 3 20.625V7.875C3 6.839 3.84 6 4.875 6Z",
                }
            }
        }
    } else {
        rsx! {
            svg {
                fill: "none",
                view_box: "0 0 24 24",
                stroke_width: "2",
                stroke: "currentColor",
                class: "{class}",
                path {
                    stroke_linecap: "round",
                    stroke_linejoin: "round",
                    d: "M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 0 1-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 0 1 1.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 0 0-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 0 1-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H9.75",
                }
            }
        }
    }
}

#[component]
pub fn ChartIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                d: "M18.375 2.25c-1.035 0-1.875.84-1.875 1.875v15.75c0 1.035.84 1.875 1.875 1.875h.75c1.035 0 1.875-.84 1.875-1.875V4.125c0-1.036-.84-1.875-1.875-1.875h-.75ZM9.75 8.625c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-.75a1.875 1.875 0 0 1-1.875-1.875V8.625ZM3 13.125c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v6.75c0 1.035-.84 1.875-1.875 1.875h-.75A1.875 1.875 0 0 1 3 19.875v-6.75Z"
            }
        }
    }
}

#[component]
pub fn GithubIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 1024 1024",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                transform: "scale(64)",
                d: "M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z",
            }
        }
    }
}

#[component(no_case_check)]
pub fn XIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 300 300",
            fill: "currentColor",
            class: "{class}",
            path {
                d: "M178.57 127.15 290.27 0h-26.46l-97.03 110.38L89.34 0H0l117.13 166.93L0 300.25h26.46l102.4-116.59 81.8 116.59h89.34M36.01 19.54H76.66l187.13 262.13h-40.66"
            }
        }
    }
}

#[component]
pub fn MarsLogoIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 350 350",
            fill: "currentColor",
            class: "{class}",
            path {
                fill: "#FFFEFE",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M203.000000,351.000000 
                C135.333344,351.000000 68.166687,351.000000 1.000027,351.000000 
                C1.000018,234.333359 1.000018,117.666733 1.000009,1.000074 
                C117.666618,1.000049 234.333237,1.000049 350.999878,1.000025 
                C350.999939,117.666595 350.999939,234.333191 350.999969,350.999878 
                C301.833344,351.000000 252.666672,351.000000 203.000000,351.000000 
                M123.097603,54.672638 
                C100.436981,54.672638 77.776360,54.672638 54.610638,54.672638 
                C54.610638,56.680676 54.610638,58.300903 54.171379,60.740269 
                C47.710167,139.319870 41.248955,217.899475 34.767124,296.729797 
                C54.075203,296.729797 73.017204,296.729797 92.471497,296.729797 
                C95.778175,252.226837 99.084343,207.730667 102.390518,163.234512 
                C102.736862,163.185318 103.083206,163.136124 103.429558,163.086929 
                C120.071648,207.604935 136.713745,252.122940 153.469330,296.944519 
                C166.028076,296.944519 178.509445,296.767334 190.981750,297.026550 
                C196.420761,297.139618 199.838333,297.005249 201.886459,290.120331 
                C206.175613,275.701965 212.404922,261.869659 217.608368,247.712463 
                C227.830658,219.900253 237.892960,192.029266 248.058029,164.195923 
                C248.222717,163.745010 248.851913,163.463745 249.590668,162.818085 
                C252.921310,207.826218 256.209320,252.258209 259.501587,296.747803 
                C278.943756,296.747803 297.880493,296.747803 317.022522,296.747803 
                C317.022522,295.412048 317.103088,294.277161 317.010895,293.156464 
                C313.667084,252.516647 310.305725,211.878265 306.949921,171.239410 
                C304.594147,142.710724 302.273132,114.179100 299.870789,85.654335 
                C299.147217,77.063240 298.202942,68.490730 297.470001,58.985359 
                C297.295532,57.579109 297.121063,56.172859 296.928070,54.617462 
                C275.034210,54.617462 253.598175,54.580246 232.163223,54.714897 
                C230.946762,54.722538 229.739136,56.139050 228.050949,57.403034 
                C211.272324,102.274857 194.493713,147.146667 177.241592,193.284821 
                C159.422134,146.797546 142.212067,101.900078 124.994461,56.399799 
                C124.644974,55.962685 124.295494,55.525570 123.097603,54.672638 
                z"
            }
            path {
                fill: "#E51A38",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M125.002014,57.002613 
                C142.212067,101.900078 159.422134,146.797546 177.241592,193.284821 
                C194.493713,147.146667 211.272324,102.274857 228.640518,57.157909 
                C229.463211,56.935528 229.696335,56.958271 230.404938,56.988228 
                C250.602768,56.996822 270.325287,57.037724 290.047241,56.952808 
                C292.707611,56.941353 294.902649,57.212292 296.322388,59.975418 
                C296.898712,59.939373 297.129242,59.924541 297.359772,59.909710 
                C298.202942,68.490730 299.147217,77.063240 299.870789,85.654335 
                C302.273132,114.179100 304.594147,142.710724 306.949921,171.239410 
                C310.305725,211.878265 313.667084,252.516647 317.010895,293.156464 
                C317.103088,294.277161 317.022522,295.412048 317.022522,296.747803 
                C297.880493,296.747803 278.943756,296.747803 259.501587,296.747803 
                C256.209320,252.258209 252.921310,207.826218 249.590668,162.818085 
                C248.851913,163.463745 248.222717,163.745010 248.058029,164.195923 
                C237.892960,192.029266 227.830658,219.900253 217.608368,247.712463 
                C212.404922,261.869659 206.175613,275.701965 201.886459,290.120331 
                C199.838333,297.005249 196.420761,297.139618 190.981750,297.026550 
                C178.509445,296.767334 166.028076,296.944519 153.469330,296.944519 
                C136.713745,252.122940 120.071648,207.604935 103.429558,163.086929 
                C103.083206,163.136124 102.736862,163.185318 102.390518,163.234512 
                C99.084343,207.730667 95.778175,252.226837 92.471497,296.729797 
                C73.017204,296.729797 54.075203,296.729797 34.767124,296.729797 
                C41.248955,217.899475 47.710167,139.319870 54.627281,60.322689 
                C55.391220,59.984287 55.703964,60.014290 56.304024,59.742561 
                C58.304699,58.659687 60.017250,57.120373 61.741714,57.106903 
                C82.827469,56.942249 103.914970,57.001427 125.002014,57.002613 
                z"
            }
            path {
                fill: "#E40000",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M56.021427,59.995117 
                C55.703964,60.014290 55.391220,59.984287 54.846912,59.913120 
                C54.610638,58.300903 54.610638,56.680676 54.610638,54.672638 
                C77.776360,54.672638 100.436981,54.672638 123.229599,55.172943 
                C121.555450,55.783222 119.749420,55.986618 117.943153,55.988815 
                C98.737259,56.012108 79.531113,56.049774 60.325665,55.955437 
                C57.322399,55.940685 55.415512,56.464279 56.021427,59.995117 
                z"
            }
            path {
                fill: "#E5263E",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M56.304024,59.742561 
                C55.415512,56.464279 57.322399,55.940685 60.325665,55.955437 
                C79.531113,56.049774 98.737259,56.012108 117.943153,55.988815 
                C119.749420,55.986618 121.555450,55.783222 123.653793,55.380852 
                C124.295494,55.525570 124.644974,55.962685 124.998238,56.701206 
                C103.914970,57.001427 82.827469,56.942249 61.741714,57.106903 
                C60.017250,57.120373 58.304699,58.659687 56.304024,59.742561 
                z"
            }
            path {
                fill: "#E40001",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M297.414886,59.447533 
                C297.129242,59.924541 296.898712,59.939373 296.328064,59.550606 
                C296.332794,55.268299 293.510529,56.017372 291.311737,56.014782 
                C272.403687,55.992504 253.495560,55.979050 234.587738,56.044312 
                C233.033920,56.049671 231.482162,56.654644 229.929459,56.981010 
                C229.696335,56.958271 229.463211,56.935528 228.878754,56.906311 
                C229.739136,56.139050 230.946762,54.722538 232.163223,54.714897 
                C253.598175,54.580246 275.034210,54.617462 296.928070,54.617462 
                C297.121063,56.172859 297.295532,57.579109 297.414886,59.447533 
                z"
            }
            path {
                fill: "#E5253D",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M230.404938,56.988228 
                C231.482162,56.654644 233.033920,56.049671 234.587738,56.044312 
                C253.495560,55.979050 272.403687,55.992504 291.311737,56.014782 
                C293.510529,56.017372 296.332794,55.268299 295.982239,59.571827 
                C294.902649,57.212292 292.707611,56.941353 290.047241,56.952808 
                C270.325287,57.037724 250.602768,56.996822 230.404938,56.988228 
                z"
            }
        }
    }
}

#[component]
pub fn MarsWordmarkIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 350 350",
            fill: "currentColor",
            class: "{class}",
            path {
                fill: "#FFFEFE",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M203.000000,351.000000 
                C135.333344,351.000000 68.166687,351.000000 1.000027,351.000000 
                C1.000018,234.333359 1.000018,117.666733 1.000009,1.000074 
                C117.666618,1.000049 234.333237,1.000049 350.999878,1.000025 
                C350.999939,117.666595 350.999939,234.333191 350.999969,350.999878 
                C301.833344,351.000000 252.666672,351.000000 203.000000,351.000000 
                M123.097603,54.672638 
                C100.436981,54.672638 77.776360,54.672638 54.610638,54.672638 
                C54.610638,56.680676 54.610638,58.300903 54.171379,60.740269 
                C47.710167,139.319870 41.248955,217.899475 34.767124,296.729797 
                C54.075203,296.729797 73.017204,296.729797 92.471497,296.729797 
                C95.778175,252.226837 99.084343,207.730667 102.390518,163.234512 
                C102.736862,163.185318 103.083206,163.136124 103.429558,163.086929 
                C120.071648,207.604935 136.713745,252.122940 153.469330,296.944519 
                C166.028076,296.944519 178.509445,296.767334 190.981750,297.026550 
                C196.420761,297.139618 199.838333,297.005249 201.886459,290.120331 
                C206.175613,275.701965 212.404922,261.869659 217.608368,247.712463 
                C227.830658,219.900253 237.892960,192.029266 248.058029,164.195923 
                C248.222717,163.745010 248.851913,163.463745 249.590668,162.818085 
                C252.921310,207.826218 256.209320,252.258209 259.501587,296.747803 
                C278.943756,296.747803 297.880493,296.747803 317.022522,296.747803 
                C317.022522,295.412048 317.103088,294.277161 317.010895,293.156464 
                C313.667084,252.516647 310.305725,211.878265 306.949921,171.239410 
                C304.594147,142.710724 302.273132,114.179100 299.870789,85.654335 
                C299.147217,77.063240 298.202942,68.490730 297.470001,58.985359 
                C297.295532,57.579109 297.121063,56.172859 296.928070,54.617462 
                C275.034210,54.617462 253.598175,54.580246 232.163223,54.714897 
                C230.946762,54.722538 229.739136,56.139050 228.050949,57.403034 
                C211.272324,102.274857 194.493713,147.146667 177.241592,193.284821 
                C159.422134,146.797546 142.212067,101.900078 124.994461,56.399799 
                C124.644974,55.962685 124.295494,55.525570 123.097603,54.672638 
                z"
            }
            path {
                fill: "#E51A38",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M125.002014,57.002613 
                C142.212067,101.900078 159.422134,146.797546 177.241592,193.284821 
                C194.493713,147.146667 211.272324,102.274857 228.640518,57.157909 
                C229.463211,56.935528 229.696335,56.958271 230.404938,56.988228 
                C250.602768,56.996822 270.325287,57.037724 290.047241,56.952808 
                C292.707611,56.941353 294.902649,57.212292 296.322388,59.975418 
                C296.898712,59.939373 297.129242,59.924541 297.359772,59.909710 
                C298.202942,68.490730 299.147217,77.063240 299.870789,85.654335 
                C302.273132,114.179100 304.594147,142.710724 306.949921,171.239410 
                C310.305725,211.878265 313.667084,252.516647 317.010895,293.156464 
                C317.103088,294.277161 317.022522,295.412048 317.022522,296.747803 
                C297.880493,296.747803 278.943756,296.747803 259.501587,296.747803 
                C256.209320,252.258209 252.921310,207.826218 249.590668,162.818085 
                C248.851913,163.463745 248.222717,163.745010 248.058029,164.195923 
                C237.892960,192.029266 227.830658,219.900253 217.608368,247.712463 
                C212.404922,261.869659 206.175613,275.701965 201.886459,290.120331 
                C199.838333,297.005249 196.420761,297.139618 190.981750,297.026550 
                C178.509445,296.767334 166.028076,296.944519 153.469330,296.944519 
                C136.713745,252.122940 120.071648,207.604935 103.429558,163.086929 
                C103.083206,163.136124 102.736862,163.185318 102.390518,163.234512 
                C99.084343,207.730667 95.778175,252.226837 92.471497,296.729797 
                C73.017204,296.729797 54.075203,296.729797 34.767124,296.729797 
                C41.248955,217.899475 47.710167,139.319870 54.627281,60.322689 
                C55.391220,59.984287 55.703964,60.014290 56.304024,59.742561 
                C58.304699,58.659687 60.017250,57.120373 61.741714,57.106903 
                C82.827469,56.942249 103.914970,57.001427 125.002014,57.002613 
                z"
            }
            path {
                fill: "#E40000",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M56.021427,59.995117 
                C55.703964,60.014290 55.391220,59.984287 54.846912,59.913120 
                C54.610638,58.300903 54.610638,56.680676 54.610638,54.672638 
                C77.776360,54.672638 100.436981,54.672638 123.229599,55.172943 
                C121.555450,55.783222 119.749420,55.986618 117.943153,55.988815 
                C98.737259,56.012108 79.531113,56.049774 60.325665,55.955437 
                C57.322399,55.940685 55.415512,56.464279 56.021427,59.995117 
                z"
            }
            path {
                fill: "#E5263E",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M56.304024,59.742561 
                C55.415512,56.464279 57.322399,55.940685 60.325665,55.955437 
                C79.531113,56.049774 98.737259,56.012108 117.943153,55.988815 
                C119.749420,55.986618 121.555450,55.783222 123.653793,55.380852 
                C124.295494,55.525570 124.644974,55.962685 124.998238,56.701206 
                C103.914970,57.001427 82.827469,56.942249 61.741714,57.106903 
                C60.017250,57.120373 58.304699,58.659687 56.304024,59.742561 
                z"
            }
            path {
                fill: "#E40001",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M297.414886,59.447533 
                C297.129242,59.924541 296.898712,59.939373 296.328064,59.550606 
                C296.332794,55.268299 293.510529,56.017372 291.311737,56.014782 
                C272.403687,55.992504 253.495560,55.979050 234.587738,56.044312 
                C233.033920,56.049671 231.482162,56.654644 229.929459,56.981010 
                C229.696335,56.958271 229.463211,56.935528 228.878754,56.906311 
                C229.739136,56.139050 230.946762,54.722538 232.163223,54.714897 
                C253.598175,54.580246 275.034210,54.617462 296.928070,54.617462 
                C297.121063,56.172859 297.295532,57.579109 297.414886,59.447533 
                z"
            }
            path {
                fill: "#E5253D",
                opacity: "1.000000",
                stroke: "none",
                d: "
                M230.404938,56.988228 
                C231.482162,56.654644 233.033920,56.049671 234.587738,56.044312 
                C253.495560,55.979050 272.403687,55.992504 291.311737,56.014782 
                C293.510529,56.017372 296.332794,55.268299 295.982239,59.571827 
                C294.902649,57.212292 292.707611,56.941353 290.047241,56.952808 
                C270.325287,57.037724 250.602768,56.996822 230.404938,56.988228 
                z"
            }
        }
    }
}

#[component]
pub fn TreasuryIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                d: "M11.584 2.376a.75.75 0 0 1 .832 0l9 6a.75.75 0 1 1-.832 1.248L12 3.901 3.416 9.624a.75.75 0 0 1-.832-1.248l9-6Z"
            }
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M20.25 10.332v9.918H21a.75.75 0 0 1 0 1.5H3a.75.75 0 0 1 0-1.5h.75v-9.918a.75.75 0 0 1 .634-.74A49.109 49.109 0 0 1 12 9c2.59 0 5.134.202 7.616.592a.75.75 0 0 1 .634.74Zm-7.5 2.418a.75.75 0 0 0-1.5 0v6.75a.75.75 0 0 0 1.5 0v-6.75Zm3-.75a.75.75 0 0 1 .75.75v6.75a.75.75 0 0 1-1.5 0v-6.75a.75.75 0 0 1 .75-.75ZM9 12.75a.75.75 0 0 0-1.5 0v6.75a.75.75 0 0 0 1.5 0v-6.75Z"
            }
            path {
                d: "M12 7.875a1.125 1.125 0 1 0 0-2.25 1.125 1.125 0 0 0 0 2.25Z"
            }
        }
    }
}

#[component]
pub fn BusIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                d: "M3.375 4.5C2.339 4.5 1.5 5.34 1.5 6.375V13.5h12V6.375c0-1.036-.84-1.875-1.875-1.875h-8.25ZM13.5 15h-12v2.625c0 1.035.84 1.875 1.875 1.875h.375a3 3 0 1 1 6 0h3a.75.75 0 0 0 .75-.75V15Z"
            }
            path {
                d: "M8.25 19.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0ZM15.75 6.75a.75.75 0 0 0-.75.75v11.25c0 .087.015.17.042.248a3 3 0 0 1 5.958.464c.853-.175 1.522-.935 1.464-1.883a18.659 18.659 0 0 0-3.732-10.104 1.837 1.837 0 0 0-1.47-.725H15.75Z"
            }
            path {
                d: "M19.5 19.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"
            }
        }
    }
}

// #[component]
// pub fn PieIcon(class: Option<String>) -> Element {
//     let class = class.unwrap_or("".to_string());
//     rsx! {
//         svg {
//             view_box: "0 0 24 24",
//             fill: "currentColor",
//             class: "{class}",
//             path {
//                 fill_rule: "evenodd",
//                 clip_rule: "evenodd",
//                 d: "M2.25 13.5a8.25 8.25 0 0 1 8.25-8.25.75.75 0 0 1 .75.75v6.75H18a.75.75 0 0 1 .75.75 8.25 8.25 0 0 1-16.5 0Z"
//             }
//             path {
//                 fill_rule: "evenodd",
//                 clip_rule: "evenodd",
//                 d: "M12.75 3a.75.75 0 0 1 .75-.75 8.25 8.25 0 0 1 8.25 8.25.75.75 0 0 1-.75.75h-7.5a.75.75 0 0 1-.75-.75V3Z"
//             }
//         }
//     }
// }

#[component]
pub fn LockOpenIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M18 1.5c2.9 0 5.25 2.35 5.25 5.25v3.75a.75.75 0 0 1-1.5 0V6.75a3.75 3.75 0 1 0-7.5 0v3a3 3 0 0 1 3 3v6.75a3 3 0 0 1-3 3H3.75a3 3 0 0 1-3-3v-6.75a3 3 0 0 1 3-3h9v-3c0-2.9 2.35-5.25 5.25-5.25Z"
            }
        }
    }
}

#[component]
pub fn ChatButtonRightLeftIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M4.913 2.658c2.075-.27 4.19-.408 6.337-.408 2.147 0 4.262.139 6.337.408 1.922.25 3.291 1.861 3.405 3.727a4.403 4.403 0 0 0-1.032-.211 50.89 50.89 0 0 0-8.42 0c-2.358.196-4.04 2.19-4.04 4.434v4.286a4.47 4.47 0 0 0 2.433 3.984L7.28 21.53A.75.75 0 0 1 6 21v-4.03a48.527 48.527 0 0 1-1.087-.128C2.905 16.58 1.5 14.833 1.5 12.862V6.638c0-1.97 1.405-3.718 3.413-3.979Z"
            }
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M15.75 7.5c-1.376 0-2.739.057-4.086.169C10.124 7.797 9 9.103 9 10.609v4.285c0 1.507 1.128 2.814 2.67 2.94 1.243.102 2.5.157 3.768.165l2.782 2.781a.75.75 0 0 0 1.28-.53v-2.39l.33-.026c1.542-.125 2.67-1.433 2.67-2.94v-4.286c0-1.505-1.125-2.811-2.664-2.94A49.392 49.392 0 0 0 15.75 7.5Z"
            }
        }
    }
}

#[component]
pub fn FlagIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M3 2.25a.75.75 0 0 1 .75.75v.54l1.838-.46a9.75 9.75 0 0 1 6.725.738l.108.054A8.25 8.25 0 0 0 18 4.524l3.11-.732a.75.75 0 0 1 .917.81 47.784 47.784 0 0 0 .005 10.337.75.75 0 0 1-.574.812l-3.114.733a9.75 9.75 0 0 1-6.594-.77l-.108-.054a8.25 8.25 0 0 0-5.69-.625l-2.202.55V21a.75.75 0 0 1-1.5 0V3A.75.75 0 0 1 3 2.25Z"
            }
        }
    }
}

#[component]
pub fn EyeSlashIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M3.53 2.47a.75.75 0 0 0-1.06 1.06l18 18a.75.75 0 1 0 1.06-1.06l-18-18ZM22.676 12.553a11.249 11.249 0 0 1-2.631 4.31l-3.099-3.099a5.25 5.25 0 0 0-6.71-6.71L7.759 4.577a11.217 11.217 0 0 1 4.242-.827c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113Z"
            }
            path {
                d: "M15.75 12c0 .18-.013.357-.037.53l-4.244-4.243A3.75 3.75 0 0 1 15.75 12ZM12.53 15.713l-4.243-4.244a3.75 3.75 0 0 0 4.244 4.243Z"
            }
            path {
                d: "M6.75 12c0-.619.107-1.213.304-1.764l-3.1-3.1a11.25 11.25 0 0 0-2.63 4.31c-.12.362-.12.752 0 1.114 1.489 4.467 5.704 7.69 10.675 7.69 1.5 0 2.933-.294 4.242-.827l-2.477-2.477A5.25 5.25 0 0 1 6.75 12Z"
            }
        }
    }
}

#[component]
pub fn RefreshIcon(class: Option<String>) -> Element {
    let class = class.unwrap_or("".to_string());
    rsx! {
        svg {
            view_box: "0 0 24 24",
            fill: "currentColor",
            class: "{class}",
            path {
                fill_rule: "evenodd",
                clip_rule: "evenodd",
                d: "M4.755 10.059a7.5 7.5 0 0 1 12.548-3.364l1.903 1.903h-3.183a.75.75 0 1 0 0 1.5h4.992a.75.75 0 0 0 .75-.75V4.356a.75.75 0 0 0-1.5 0v3.18l-1.9-1.9A9 9 0 0 0 3.306 9.67a.75.75 0 1 0 1.45.388Zm15.408 3.352a.75.75 0 0 0-.919.53 7.5 7.5 0 0 1-12.548 3.364l-1.902-1.903h3.183a.75.75 0 0 0 0-1.5H2.984a.75.75 0 0 0-.75.75v4.992a.75.75 0 0 0 1.5 0v-3.18l1.9 1.9a9 9 0 0 0 15.059-4.035.75.75 0 0 0-.53-.918Z"
            }
        }
    }
}
